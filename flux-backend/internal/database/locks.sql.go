// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: locks.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createLock = `-- name: CreateLock :one
INSERT INTO locks (
    name,
    created_by,
    description,
    lock_type,
    timeout
) VALUES (
    $1, -- name
    $2, -- created_by
    $3, -- description
    $4, -- lock_type: either timer or manual
    $5  -- timeout: null only if manual
)
RETURNING id, name, created_by, created_at, description, access, lock_type, timeout
`

type CreateLockParams struct {
	Name        string     `json:"name"`
	CreatedBy   uuid.UUID  `json:"created_by"`
	Description string     `json:"description"`
	LockType    LockType   `json:"lock_type"`
	Timeout     *time.Time `json:"timeout"`
}

func (q *Queries) CreateLock(ctx context.Context, arg CreateLockParams) (Lock, error) {
	row := q.db.QueryRow(ctx, createLock,
		arg.Name,
		arg.CreatedBy,
		arg.Description,
		arg.LockType,
		arg.Timeout,
	)
	var i Lock
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Description,
		&i.Access,
		&i.LockType,
		&i.Timeout,
	)
	return i, err
}

const deleteLockById = `-- name: DeleteLockById :exec
DELETE FROM locks 
WHERE id=$1
`

func (q *Queries) DeleteLockById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLockById, id)
	return err
}

const getLockById = `-- name: GetLockById :one
SELECT id, name, created_by, created_at, description, access, lock_type, timeout FROM locks WHERE id=$1
`

func (q *Queries) GetLockById(ctx context.Context, groupD uuid.UUID) (Lock, error) {
	row := q.db.QueryRow(ctx, getLockById, groupD)
	var i Lock
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Description,
		&i.Access,
		&i.LockType,
		&i.Timeout,
	)
	return i, err
}

const getLocksByFilter = `-- name: GetLocksByFilter :many
SELECT id, name, created_by, created_at, description, access, lock_type, timeout FROM locks
WHERE
    name ILIKE '%' || $1::text || '%'
    AND (
        $2::uuid IS NULL OR
        $2::uuid = created_by
    )
LIMIT $4
OFFSET $3
`

type GetLocksByFilterParams struct {
	LockName  string     `json:"lock_name"`
	CreatedBy *uuid.UUID `json:"created_by"`
	Offset    int32      `json:"offset"`
	Limit     int32      `json:"limit"`
}

func (q *Queries) GetLocksByFilter(ctx context.Context, arg GetLocksByFilterParams) ([]Lock, error) {
	rows, err := q.db.Query(ctx, getLocksByFilter,
		arg.LockName,
		arg.CreatedBy,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lock
	for rows.Next() {
		var i Lock
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.Description,
			&i.Access,
			&i.LockType,
			&i.Timeout,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLockDetails = `-- name: UpdateLockDetails :one
UPDATE locks
SET
    name = $2,
    timeout = $3,
    description = $4
WHERE
    id = $1
RETURNING id, name, created_by, created_at, description, access, lock_type, timeout
`

type UpdateLockDetailsParams struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Timeout     *time.Time `json:"timeout"`
	Description string     `json:"description"`
}

func (q *Queries) UpdateLockDetails(ctx context.Context, arg UpdateLockDetailsParams) (Lock, error) {
	row := q.db.QueryRow(ctx, updateLockDetails,
		arg.ID,
		arg.Name,
		arg.Timeout,
		arg.Description,
	)
	var i Lock
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Description,
		&i.Access,
		&i.LockType,
		&i.Timeout,
	)
	return i, err
}
