// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table users {
  id uuid pk 
  roll_no varchar(255)
  user_name varchar(255)
  first_name varchar(255)
  last_name varchar(255)
  email varchar(255)
  passwordHash varchar(255)
}

Table roles {
  role_name varchar(50) pk
}

Table user_roles {
  user_id uuid pk
  role_name varchar(50) pk
}

Ref: user_roles.user_id > users.id
Ref: user_roles.role_name > roles.role_name

Table locks {
  id uuid pk
  lock_type enum
  timeout datetime [null]
  group_id uuid
  access varchar(50)
}

Ref: locks.access > roles.role_name

Table problems {
  id uuid pk
  title varchar(255)
  statement text
  input_format text
  output_format text
  samples jsonb
  notes text
  memory_limit_kb int
  time_limit_ms int
  created_by uuid
  created_at datetime
  updated_at datetime
  difficulty int
  submission_link uri
  platform varchar(255)
  lock_id int
}

Ref: problems.created_by > users.id

Table contests {
  id int pk
  title varchar(255)
  created_by uuid
  created_at datetime
  updated_at datetime
  start_time datetime
  end_time datetime
  is_published boolean
  lock_id int
}

Ref: problems.lock_id > locks.id
Ref: contests.lock_id > locks.id
Ref: contests.created_by > users.id

Table contest_problems {
  contest_id uuid pk
  problem_id uuid pk
  score int
}

Table solved {
  user_id uuid
  contest_id uuid
  problem_id uuid
}

Table user_scores {
  user_id uuid
  contest_id uuid
  problem_id uuid
  score int
  updated_at datetime
  submission_id uuid
}

Ref: user_scores.submission_id - submissions.id
Ref: user_scores.user_id > users.id
Ref: user_scores.contest_id > contest_problems.contest_id
Ref: user_scores.problem_id > contest_problems.problem_id
Ref: solved.user_id > users.id
Ref: solved.contest_id > contest_problems.contest_id
Ref: solved.problem_id > contest_problems.problem_id
Ref: contest_problems.contest_id > contests.id
Ref: contest_problems.problem_id > problems.id

Table bots {
  id uuid pk
  account_name varchar(255)
  platform varchar(255)
  website_data jsonb
}

Table submissions{
  id uuid pk
  bot_account_id uuid
  website_data jsonb
  submitted_by uuid
  contest_id uuid [null]
  problem_id uuid
  language varchar(50)
  solution text
  status text
}

Ref: submissions.submitted_by > users.id
Ref: submissions.contest_id > contests.id
Ref: submissions.problem_id > problems.id
Ref: submissions.bot_account_id > bots.id

Table tournaments {
  id uuid pk
  title varchar(255) unique
  created_by uuid
  updated_by uuid
}

Table tournament_rounds {
  id uuid pk
  tournament_id uuid
  round int
  lock_id uuid
  title varchar(100)
  created_by uuid
  updated_by uuid
}

Ref: tournament_rounds.tournament_id > tournaments.id
Ref: tournament_rounds.lock_id > locks.id
Ref: tournament_rounds.created_by > users.id
Ref: tournament_rounds.updated_by > users.id

Table tournament_round_contests {
  contest_id uuid
  tournament_round_id uuid
}

Ref: tournament_round_contests.contest_id > contests.id
Ref: tournament_round_contests.tournament_round_id > tournament_rounds.id

Table contest_registered_users {
  user_id uuid
  contest_id uuid
}

Ref: contest_registered_users.user_id > users.id
Ref: contest_registered_users.contest_id > contests.id
